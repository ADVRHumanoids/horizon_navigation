solver:
  type: ilqr # ilqr # ipopt
  ipopt.linear_solver: ma57
  ipopt.tol: 0.1
  ilqr.tol: 0.01
  ipopt.constr_viol_tol: 0.01
  ilqr.constr_viol_tol: 0.01
#  ipopt.hessian_approximation: exact
  ipopt.print_level: 5
  ipopt.suppress_all_output: 'yes'
  ipopt.sb: 'yes'
  ilqr.suppress_all_output: 'yes'
  ilqr.codegen_enabled: true
  ilqr.codegen_workdir: /tmp/soafwg
  ilqr.enable_gn: true
  ilqr.step_length_threshold: 0.0
#  ilqr.step_length: 0.01
#  ilqr.max_iter: 100
#  ilqr.enable_line_search: true
  ilqr.hxx_reg_base: 0.0
#  ilqr.alpha_min: 1e-6
  print_time: 0

constraints:
#  - rolling_contact_1
#  - rolling_contact_2
#  - rolling_contact_3
#  - rolling_contact_4
  - final_base_xy
costs:
  - velocity_regularization
  - acceleration_regularization
  - posture_cart
  - posture_arm


.define:
    - &w_vel 0.01
    - &w_acc 1e-2
    - &w_e_xy_f 1.
    - &w_base_xy 10.
    - &w_postural_cart 0.01
    - &w_postural_arm 0.1
    - &wheel_radius 0.16


ee_xy_force:
  type: Cartesian
  distal_link: ee_E
  indices: [0, 1]
  nodes: all
  weight: *w_e_xy_f

final_base_xy:
  type: Cartesian
  distal_link: base_link
  indices: [0, 1]
  nodes: ${N}
#  nodes: all
  cartesian_type: position
  weight: *w_base_xy

rolling_contact_1:
  type: Rolling
  frame: J_wheel_A
  radius: *wheel_radius
  nodes: all

rolling_contact_2:
  type: Rolling
  frame: J_wheel_B
  radius: *wheel_radius
  nodes: all

rolling_contact_3:
  type: Rolling
  frame: J_wheel_C
  radius: *wheel_radius
  nodes: all

rolling_contact_4:
  type: Rolling
  frame: J_wheel_D
  radius: *wheel_radius
  nodes: all

# ==================================

posture_cart:
  type: Postural
  weight: *w_postural_cart
  indices: [0, 2, 4, 6] # wheels at the beginning of q
#  indices: [6, 8, 10, 12]
  nodes: all

posture_arm:
  type: Postural
  weight: *w_postural_arm
  indices: [8, 9, 10, 11, 12, 13] # wheels at the beginning of q
#  indices: [0, 1, 2, 3, 4, 5]
  nodes: all

# todo: wrong, as the order COUNTS. If I add the contacts after the joint regularization, they wont get considered.
velocity_regularization:
  type: Regularization
  nodes: all
#  indices: [0, 2, 4, 6,
#            8, 9, 10, 11, 12, 13]
  weight:
    velocity: *w_vel

acceleration_regularization:
  type: Regularization
  nodes: all
#  indices: [ 0, 2, 4, 6,
#             8, 9, 10, 11, 12, 13 ]
  weight:
    acceleration: *w_acc # 0.01

#force_regularization:
#  type: Regularization
#  nodes: all
#  weight:
#    force: 1e-4 # todo <----- how to do? if there are more forces...

